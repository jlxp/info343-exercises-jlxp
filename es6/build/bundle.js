!function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var r={};e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function o(t){return t.ok?t.json():t.json().then(function(t){throw new Error(t.errorMessage)})}function i(t){console.error(t)}function s(t){console.log(t),h.textContent="";for(var e=0;e<t.results.length;e++){var r=new u.default(t.results[e]);h.appendChild(r.render())}}r(1);var a=r(2),u=n(a),f=r(3),c=n(f),h=(document.querySelector(".progress"),document.querySelector("#results")),l=document.querySelector("#search-form"),d=document.querySelector("#search-input");l.addEventListener("submit",function(t){t.preventDefault();var e=d.value;h.textContent="",h.appendChild((new c.default).render()),fetch("https://itunes.apple.com/search?entity=musicTrack&term="+e).then(o).then(s).catch(i)})},function(t,e){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function r(t){return"string"!=typeof t&&(t=String(t)),t}function n(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return m.iterable&&(e[Symbol.iterator]=function(){return e}),e}function o(t){this.map={},t instanceof o?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function a(t){var e=new FileReader,r=s(e);return e.readAsArrayBuffer(t),r}function u(t){var e=new FileReader,r=s(e);return e.readAsText(t),r}function f(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}function c(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(m.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(m.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(m.arrayBuffer&&m.blob&&w(t))this._bodyArrayBuffer=c(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!m.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!_(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=c(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):m.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},m.blob&&(this.blob=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=i(this);if(t)return t;if(this._bodyBlob)return u(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(f(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},m.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function l(t){var e=t.toUpperCase();return E.indexOf(e)>-1?e:t}function d(t,e){e=e||{};var r=e.body;if(t instanceof d){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new o(t.headers)),this.method=t.method,this.mode=t.mode,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new o(e.headers)),this.method=l(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function y(t){var e=new o;return t.split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}function b(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new o(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var m={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(m.arrayBuffer)var v=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],w=function(t){return t&&DataView.prototype.isPrototypeOf(t)},_=ArrayBuffer.isView||function(t){return t&&v.indexOf(Object.prototype.toString.call(t))>-1};o.prototype.append=function(t,n){t=e(t),n=r(n);var o=this.map[t];this.map[t]=o?o+","+n:n},o.prototype.delete=function(t){delete this.map[e(t)]},o.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},o.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},o.prototype.set=function(t,n){this.map[e(t)]=r(n)},o.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},o.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),n(t)},o.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),n(t)},o.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),n(t)},m.iterable&&(o.prototype[Symbol.iterator]=o.prototype.entries);var E=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];d.prototype.clone=function(){return new d(this,{body:this._bodyInit})},h.call(d.prototype),h.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new o(this.headers),url:this.url})},b.error=function(){var t=new b(null,{status:0,statusText:""});return t.type="error",t};var g=[301,302,303,307,308];b.redirect=function(t,e){if(-1===g.indexOf(e))throw new RangeError("Invalid status code");return new b(null,{status:e,headers:{location:t}})},t.Headers=o,t.Request=d,t.Response=b,t.fetch=function(t,e){return new Promise(function(r,n){var o=new d(t,e),i=new XMLHttpRequest;i.onload=function(){var t={status:i.status,statusText:i.statusText,headers:y(i.getAllResponseHeaders()||"")};t.url="responseURL"in i?i.responseURL:t.headers.get("X-Request-URL");var e="response"in i?i.response:i.responseText;r(new b(e,t))},i.onerror=function(){n(new TypeError("Network request failed"))},i.ontimeout=function(){n(new TypeError("Network request failed"))},i.open(o.method,o.url,!0),"include"===o.credentials&&(i.withCredentials=!0),"responseType"in i&&m.blob&&(i.responseType="blob"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=new Audio,s=function(){function t(e){n(this,t),this.trackData=e}return o(t,[{key:"render",value:function(){var t=this,e=document.createElement("figure"),r=e.appendChild(document.createElement("img"));return r.src=this.trackData.artworkUrl100,r.alt=this.trackData.trackName,e.appendChild(document.createElement("figcaption")).textContent=this.trackData.trackName,e.addEventListener("click",function(){i.src=t.trackData.previewUrl,i.play()}),e}}]),t}();e.default=s},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=function(){function t(e){n(this,t),this.value=e||100}return o(t,[{key:"render",value:function(){var t=document.createElement("div");t.classList.add("progress");var e=t.appendChild(document.createElement("div"));return e.classList.add("progress-bar","progress-bar-striped","progress-bar-animated"),e.style.width=this.value+"%",t}}]),t}();e.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA3ZDgzNGQ2MjdhMzNkZWY3MGJlMyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVHJhY2tDYXJkLmpzIiwid2VicGFjazovLy8uL3NyYy9Qcm9ncmVzc0Jhci5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsImRlZmF1bHQiLCJoYW5kbGVSZXNwb25zZSIsInJlc3BvbnNlIiwib2siLCJqc29uIiwidGhlbiIsImVyciIsIkVycm9yIiwiZXJyb3JNZXNzYWdlIiwiaGFuZGxlRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJyZW5kZXJSZXN1bHRzIiwiZGF0YSIsImxvZyIsIlJFU1VMVFNfRElWIiwidGV4dENvbnRlbnQiLCJyZXN1bHRzIiwibGVuZ3RoIiwidGMiLCJfVHJhY2tDYXJkMiIsImFwcGVuZENoaWxkIiwicmVuZGVyIiwiX1RyYWNrQ2FyZCIsIl9Qcm9ncmVzc0JhciIsIl9Qcm9ncmVzc0JhcjIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJTRUFSQ0hfRk9STSIsIlNFQVJDSF9JTlBVVCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsInEiLCJ2YWx1ZSIsImZldGNoIiwiY2F0Y2giLCJzZWxmIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsInVuZGVmaW5lZCIsInN1cHBvcnQiLCJpdGVyYWJsZSIsIlN5bWJvbCIsIkhlYWRlcnMiLCJoZWFkZXJzIiwidGhpcyIsIm1hcCIsImZvckVhY2giLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJQcm9taXNlIiwicmVqZWN0IiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVzb2x2ZSIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiRmlsZVJlYWRlciIsInByb21pc2UiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiYnVmZmVyQ2xvbmUiLCJzbGljZSIsImJ5dGVMZW5ndGgiLCJzZXQiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiQmxvYiIsImlzUHJvdG90eXBlT2YiLCJfYm9keUJsb2IiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwiYXJyYXlCdWZmZXIiLCJpc0RhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJ0eXBlIiwicmVqZWN0ZWQiLCJ0ZXh0IiwiZGVjb2RlIiwiSlNPTiIsInBhcnNlIiwibm9ybWFsaXplTWV0aG9kIiwibWV0aG9kIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwibWV0aG9kcyIsImluZGV4T2YiLCJSZXF1ZXN0IiwiaW5wdXQiLCJvcHRpb25zIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtb2RlIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsImxpbmUiLCJwYXJ0cyIsImtleSIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZSIsInZpZXdDbGFzc2VzIiwiRGF0YVZpZXciLCJpc1ZpZXciLCJvbGRWYWx1ZSIsImhhcyIsImNhbGxiYWNrIiwidGhpc0FyZyIsImtleXMiLCJwdXNoIiwidmFsdWVzIiwiZW50cmllcyIsImNsb25lIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiaW5pdCIsInJlcXVlc3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib250aW1lb3V0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicG9seWZpbGwiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJldmlld0F1ZGlvIiwiQXVkaW8iLCJUcmFja0NhcmQiLCJ0cmFja0RhdGEiLCJfdGhpcyIsImZpZyIsImNyZWF0ZUVsZW1lbnQiLCJpbWciLCJzcmMiLCJhcnR3b3JrVXJsMTAwIiwiYWx0IiwidHJhY2tOYW1lIiwicHJldmlld1VybCIsInBsYXkiLCJQcm9ncmVzc0JhciIsImRpdlByb2ciLCJjbGFzc0xpc3QiLCJhZGQiLCJkaXZCYXIiLCJzdHlsZSIsIndpZHRoIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBSSxFQUFBSixFQUNBSyxHQUFBLEVBQ0FILFdBVUEsT0FOQUosR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQTRCQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxTQUFBUCxFQUFBUSxFQUFBQyxHQUNBWixFQUFBYSxFQUFBVixFQUFBUSxJQUNBRyxPQUFBQyxlQUFBWixFQUFBUSxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWYsR0FDQSxHQUFBUSxHQUFBUixLQUFBZ0IsV0FDQSxXQUEyQixNQUFBaEIsR0FBQSxTQUMzQixXQUFpQyxNQUFBQSxHQUVqQyxPQURBSixHQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVEsRUFBQUMsR0FBc0QsTUFBQVIsUUFBQVMsVUFBQUMsZUFBQWpCLEtBQUFjLEVBQUFDLElBR3REdEIsRUFBQXlCLEVBQUEsR0FHQXpCLElBQUEwQixFQUFBLEtETU0sU0FBVXRCLEVBQVFELEVBQVNILEdBRWpDLFlBYUEsU0FBUzJCLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlSLFdBQWFRLEdBQVFDLFFBQVNELEdFM0R2RixRQUFTRSxHQUFlQyxH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QUFXcE0sYUFBYyxFQUFPb00sRUFBV3JNLGNBQWUsRUFBVSxTQUFXcU0sS0FBWUEsRUFBV0MsVUFBVyxHQUFNeE0sT0FBT0MsZUFBZW9NLEVBQVFFLEVBQVczQyxJQUFLMkMsSUFBaUIsTUFBTyxVQUFVTCxFQUFhTyxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWUwsRUFBaUJGLEVBQVl6TCxVQUFXZ00sR0FBaUJDLEdBQWFOLEVBQWlCRixFQUFhUSxHQUFxQlIsTUsvcUIzZ0J1QixFTDRyQkgsV0szckJkLFFBQUFBLEdBQVl4SyxHQUFPK0ksRUFBQXpILEtBQUFrSixHQUNmbEosS0FBS3RCLE1BQVFBLEdBQVMsSUwrc0IxQixNQWRBa0osR0FBYXNCLElBQ1Q3RCxJQUFLLFNBQ0wzRyxNQUFPLFdLaHNCUCxHQUFJeUssR0FBVWpMLFNBQVN3SyxjQUFjLE1BQ3JDUyxHQUFRQyxVQUFVQyxJQUFJLFdBRXRCLElBQUlDLEdBQVNILEVBQVF0TCxZQUFZSyxTQUFTd0ssY0FBYyxPQUl4RCxPQUhBWSxHQUFPRixVQUFVQyxJQUFJLGVBQWdCLHVCQUF3Qix5QkFDN0RDLEVBQU9DLE1BQU1DLE1BQVF4SixLQUFLdEIsTUFBUSxJQUUzQnlLLE1McXNCSkQsSUFHWHBPLEdBQVEwQixRS3B0QmEwTSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbl9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfVHJhY2tDYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9UcmFja0NhcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhY2tDYXJkKTtcblxudmFyIF9Qcm9ncmVzc0JhciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfUHJvZ3Jlc3NCYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvZ3Jlc3NCYXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vL2lUdW5lcyBTZWFyY2ggQVBJXG4vL2BlbnRpdHk9bXVzaWNgIGZpbHRlcnMgZm9yIGp1c3QgbXVzaWMgdHJhY2tzIGFuZCBtdXNpYyB2aWRlb3Ncbi8vYHRlcm09Li4uYCBpcyBob3cgeW91IHNwZWNpZnkgdGhlIHNlYXJjaCB0ZXJtXG52YXIgU0VBUkNIX0FQSSA9IFwiaHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL3NlYXJjaD9lbnRpdHk9bXVzaWNUcmFjayZ0ZXJtPVwiOyAvL1RPRE86IGltcG9ydCBmZXRjaCgpIHBvbHlmaWxsIGxpYnJhcnkgYHdoYXR3Zy1mZXRjaGBcbi8vZnJvbSB0aGUgbm9kZV9tb2R1bGVzIGRpcmVjdG9yeVxuLy90aGlzIHdpbGwgZW5zdXJlIGl0J3MgYWRkZWQgdG8gdGhlIGZpbmFsIGJ1bmRsZS5qc1xuXG5cbnZhciBQUk9HUkVTU19CQVIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2dyZXNzXCIpO1xudmFyIFJFU1VMVFNfRElWID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNyZXN1bHRzXCIpO1xudmFyIFNFQVJDSF9GT1JNID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtZm9ybVwiKTtcbnZhciBTRUFSQ0hfSU5QVVQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1pbnB1dFwiKTtcblxuLyoqXHJcbiAqIEhhbmRsZXMgcmVzcG9uc2VzIGZyb20gdGhlIGZldGNoKCkgQVBJLlxyXG4gKiBUaGUgaVR1bmVzIEFQSSBhbHdheXMgcmV0dXJucyBKU09OLCBldmVuIGZvclxyXG4gKiBzdGF0dXMgY29kZXMgPj0gNDAwLlxyXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNwb25zZSBcclxuICovXG5mdW5jdGlvbiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vaVR1bmVzIEFQSSBlcnJvcnMgYXJlIHJldHVybmVkXG4gICAgICAgIC8vYXMgYSBKU09OIG9iamVjdCBjb250YWluaW5nXG4gICAgICAgIC8vYW4gYGVycm9yTWVzc2FnZWAgcHJvcGVydHlcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS50aGVuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIuZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcclxuICogSGFuZGxlcyBlcnJvcnMgdGhhdCBvY2N1ciB3aGlsZSBmZXRjaGluZ1xyXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgXHJcbiAqL1xuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIC8vVE9ETzogY3JlYXRlIGFuIGluc3RhbmNlIG9mIEVycm9yQWxlcnRcbiAgICAvL2FuZCByZW5kZXIgaXQgdG8gdGhlIFJFU1VMVFNfRElWIGVsZW1lbnRcbn1cblxuLyoqXHJcbiAqIFJlbmRlcnMgdGhlIGlUdW5lcyBzZWFyY2ggQVBJIHJlc3VsdHNcclxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgXHJcbiAqL1xuZnVuY3Rpb24gcmVuZGVyUmVzdWx0cyhkYXRhKSB7XG4gICAgLy9UaGUgYGRhdGFgIHJldHVybmVkIGZyb20gdGhlIGlUdW5lcyBBUElcbiAgICAvL2lzIGFuIG9iamVjdCB3aXRoIHR3byBwcm9wZXJ0aWVzOlxuICAgIC8vIC0gcmVzdWx0c0NvdW50OiBudW1iZXIgb2Ygc2VhcmNoIHJlc3VsdHNcbiAgICAvLyAtIHJlc3VsdHM6IGFuIGFycmF5IG9mIG9iamVjdHMsIG9uZSBmb3IgZWFjaCBzZWFyY2ggcmVzdWx0XG4gICAgLy9mb3IgZGV0YWlscyBvbiB0aGUgcHJvcGVydGllcyBpbiBlYWNoIHNlYXJjaCByZXN1bHQgb2JqZWN0LCBzZWU6XG4gICAgLy9odHRwczovL2FmZmlsaWF0ZS5pdHVuZXMuYXBwbGUuY29tL3Jlc291cmNlcy9kb2N1bWVudGF0aW9uL2l0dW5lcy1zdG9yZS13ZWItc2VydmljZS1zZWFyY2gtYXBpLyN1bmRlcnN0YW5kXG5cbiAgICAvL1RPRE86IGNyZWF0ZSBhIFRyYWNrQ2FyZCBvYmplY3QgZm9yIGVhY2ggdHJhY2sgaW4gXG4gICAgLy90aGUgYGRhdGEucmVzdWx0c2AgYXJyYXksIGFuZCByZW5kZXIgaXQgaW50byB0aGVcbiAgICAvL3RoZSBSRVNVTFRTX0RJViBlbGVtZW50XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgUkVTVUxUU19ESVYudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0YyA9IG5ldyBfVHJhY2tDYXJkMi5kZWZhdWx0KGRhdGEucmVzdWx0c1tpXSk7XG4gICAgICAgIFJFU1VMVFNfRElWLmFwcGVuZENoaWxkKHRjLnJlbmRlcigpKTtcbiAgICB9XG59XG5cbi8vVE9ETzogbGlzdGVuIGZvciB0aGUgXCJzdWJtaXRcIiBldmVudCByYWlzZWRcbi8vYnkgdGhlIFNFQVJDSF9GT1JNIGVsZW1lbnQsIGFuZCBxdWVyeSB0aGUgaVR1bmVzXG4vL0FQSS4gVXNlIGEgbGFtYmRhIGZ1bmN0aW9uIGZvciB0aGUgZXZlbnQgbGlzdGVuZXIhXG5TRUFSQ0hfRk9STS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgcSA9IFNFQVJDSF9JTlBVVC52YWx1ZTtcbiAgICBSRVNVTFRTX0RJVi50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgUkVTVUxUU19ESVYuYXBwZW5kQ2hpbGQobmV3IF9Qcm9ncmVzc0JhcjIuZGVmYXVsdCgpLnJlbmRlcigpKTtcbiAgICBmZXRjaChTRUFSQ0hfQVBJICsgcSkudGhlbihoYW5kbGVSZXNwb25zZSkudGhlbihyZW5kZXJSZXN1bHRzKS5jYXRjaChoYW5kbGVFcnJvcik7XG59KTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICByYXdIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9ICdzdGF0dXMnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1cyA6IDIwMFxuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy9UT0RPOiBpbXBsZW1lbnQgYW5kIGV4cG9ydCBhIGNsYXNzIG5hbWVkIFRyYWNrQ2FyZFxuLy90aGF0IHRha2VzIGFuIGlUdW5lcyBBUEkgcmVzdWx0IHRyYWNrIGluIHRoZSBcbi8vY29uc3RydWN0b3IsIGFuZCByZW5kZXJzIHRoYXQgdHJhY2sgZGF0YSBhcyBhblxuLy9lbGVtZW50IHRyZWUgbGlrZSB0aGlzXG4vLzxmaWd1cmU+XG4vLyAgPGltZy8+XG4vLyAgPGZpZ2NhcHRpb24+PC9maWdjYXB0aW9uPlxuLy88L2ZpZ3VyZT5cblxudmFyIHByZXZpZXdBdWRpbyA9IG5ldyBBdWRpbygpO1xuXG52YXIgVHJhY2tDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyYWNrQ2FyZCh0cmFja0RhdGEpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYWNrQ2FyZCk7XG5cbiAgICAgICAgdGhpcy50cmFja0RhdGEgPSB0cmFja0RhdGE7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRyYWNrQ2FyZCwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGZpZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWd1cmVcIik7XG4gICAgICAgICAgICB2YXIgaW1nID0gZmlnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIikpO1xuICAgICAgICAgICAgaW1nLnNyYyA9IHRoaXMudHJhY2tEYXRhLmFydHdvcmtVcmwxMDA7XG4gICAgICAgICAgICBpbWcuYWx0ID0gdGhpcy50cmFja0RhdGEudHJhY2tOYW1lO1xuXG4gICAgICAgICAgICB2YXIgZmlnY2FwID0gZmlnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWdjYXB0aW9uXCIpKTtcbiAgICAgICAgICAgIGZpZ2NhcC50ZXh0Q29udGVudCA9IHRoaXMudHJhY2tEYXRhLnRyYWNrTmFtZTtcbiAgICAgICAgICAgIGZpZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByZXZpZXdBdWRpby5zcmMgPSBfdGhpcy50cmFja0RhdGEucHJldmlld1VybDtcbiAgICAgICAgICAgICAgICBwcmV2aWV3QXVkaW8ucGxheSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmlnO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRyYWNrQ2FyZDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVHJhY2tDYXJkO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vL1RPRE86IGltcGxlbWVudCBhbmQgZXhwb3J0IGEgY2xhc3Ncbi8vbmFtZWQgUHJvZ3Jlc3NCYXIgdGhhdCByZW5kZXJzIGEgQm9vdHN0cmFwXG4vL3Byb2dyZXNzIGJhciB3aXRoIGEgd2lkdGggbWF0Y2hpbmcgdGhlIHZhbHVlXG4vL3Bhc3NlZCB0byB0aGUgY2xhc3MgY29uc3RydWN0b3Jcbi8vaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4wL2NvbXBvbmVudHMvcHJvZ3Jlc3MvXG4vLzxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiPlxuLy8gIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN0cmlwZWQgcHJvZ3Jlc3MtYmFyLWFuaW1hdGVkXCI+PC9kaXY+XG4vLzwvZGl2PlxuXG52YXIgUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvZ3Jlc3NCYXIodmFsdWUpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb2dyZXNzQmFyKTtcblxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUgfHwgMTAwO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQcm9ncmVzc0JhciwgW3tcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIGRpdlByb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZGl2UHJvZy5jbGFzc0xpc3QuYWRkKFwicHJvZ3Jlc3NcIik7XG5cbiAgICAgICAgICAgIHZhciBkaXZCYXIgPSBkaXZQcm9nLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgICAgICAgICAgZGl2QmFyLmNsYXNzTGlzdC5hZGQoXCJwcm9ncmVzcy1iYXJcIiwgXCJwcm9ncmVzcy1iYXItc3RyaXBlZFwiLCBcInByb2dyZXNzLWJhci1hbmltYXRlZFwiKTtcbiAgICAgICAgICAgIGRpdkJhci5zdHlsZS53aWR0aCA9IHRoaXMudmFsdWUgKyBcIiVcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGRpdlByb2c7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUHJvZ3Jlc3NCYXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFByb2dyZXNzQmFyO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGJ1bmRsZS5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDdkODM0ZDYyN2EzM2RlZjcwYmUzIiwiLy9UT0RPOiBpbXBvcnQgZmV0Y2goKSBwb2x5ZmlsbCBsaWJyYXJ5IGB3aGF0d2ctZmV0Y2hgXHJcbi8vZnJvbSB0aGUgbm9kZV9tb2R1bGVzIGRpcmVjdG9yeVxyXG4vL3RoaXMgd2lsbCBlbnN1cmUgaXQncyBhZGRlZCB0byB0aGUgZmluYWwgYnVuZGxlLmpzXHJcbmltcG9ydCBcIndoYXR3Zy1mZXRjaFwiO1xyXG5pbXBvcnQgVHJhY2tDYXJkIGZyb20gXCIuL1RyYWNrQ2FyZFwiO1xyXG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSBcIi4vUHJvZ3Jlc3NCYXJcIjtcclxuXHJcbi8vaVR1bmVzIFNlYXJjaCBBUElcclxuLy9gZW50aXR5PW11c2ljYCBmaWx0ZXJzIGZvciBqdXN0IG11c2ljIHRyYWNrcyBhbmQgbXVzaWMgdmlkZW9zXHJcbi8vYHRlcm09Li4uYCBpcyBob3cgeW91IHNwZWNpZnkgdGhlIHNlYXJjaCB0ZXJtXHJcbmNvbnN0IFNFQVJDSF9BUEkgPSBcImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9zZWFyY2g/ZW50aXR5PW11c2ljVHJhY2smdGVybT1cIlxyXG5cclxuY29uc3QgUFJPR1JFU1NfQkFSID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9ncmVzc1wiKTtcclxuY29uc3QgUkVTVUxUU19ESVYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc3VsdHNcIik7XHJcbmNvbnN0IFNFQVJDSF9GT1JNID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2gtZm9ybVwiKVxyXG5jb25zdCBTRUFSQ0hfSU5QVVQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaC1pbnB1dFwiKTtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHJlc3BvbnNlcyBmcm9tIHRoZSBmZXRjaCgpIEFQSS5cclxuICogVGhlIGlUdW5lcyBBUEkgYWx3YXlzIHJldHVybnMgSlNPTiwgZXZlbiBmb3JcclxuICogc3RhdHVzIGNvZGVzID49IDQwMC5cclxuICogQHBhcmFtIHtSZXNwb25zZX0gcmVzcG9uc2UgXHJcbiAqL1xyXG5mdW5jdGlvbiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9pVHVuZXMgQVBJIGVycm9ycyBhcmUgcmV0dXJuZWRcclxuICAgICAgICAvL2FzIGEgSlNPTiBvYmplY3QgY29udGFpbmluZ1xyXG4gICAgICAgIC8vYW4gYGVycm9yTWVzc2FnZWAgcHJvcGVydHlcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVyci5lcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgZXJyb3JzIHRoYXQgb2NjdXIgd2hpbGUgZmV0Y2hpbmdcclxuICogQHBhcmFtIHtFcnJvcn0gZXJyIFxyXG4gKi9cclxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAvL1RPRE86IGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBFcnJvckFsZXJ0XHJcbiAgICAvL2FuZCByZW5kZXIgaXQgdG8gdGhlIFJFU1VMVFNfRElWIGVsZW1lbnRcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgdGhlIGlUdW5lcyBzZWFyY2ggQVBJIHJlc3VsdHNcclxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJSZXN1bHRzKGRhdGEpIHtcclxuICAgIC8vVGhlIGBkYXRhYCByZXR1cm5lZCBmcm9tIHRoZSBpVHVuZXMgQVBJXHJcbiAgICAvL2lzIGFuIG9iamVjdCB3aXRoIHR3byBwcm9wZXJ0aWVzOlxyXG4gICAgLy8gLSByZXN1bHRzQ291bnQ6IG51bWJlciBvZiBzZWFyY2ggcmVzdWx0c1xyXG4gICAgLy8gLSByZXN1bHRzOiBhbiBhcnJheSBvZiBvYmplY3RzLCBvbmUgZm9yIGVhY2ggc2VhcmNoIHJlc3VsdFxyXG4gICAgLy9mb3IgZGV0YWlscyBvbiB0aGUgcHJvcGVydGllcyBpbiBlYWNoIHNlYXJjaCByZXN1bHQgb2JqZWN0LCBzZWU6XHJcbiAgICAvL2h0dHBzOi8vYWZmaWxpYXRlLml0dW5lcy5hcHBsZS5jb20vcmVzb3VyY2VzL2RvY3VtZW50YXRpb24vaXR1bmVzLXN0b3JlLXdlYi1zZXJ2aWNlLXNlYXJjaC1hcGkvI3VuZGVyc3RhbmRcclxuXHJcbiAgICAvL1RPRE86IGNyZWF0ZSBhIFRyYWNrQ2FyZCBvYmplY3QgZm9yIGVhY2ggdHJhY2sgaW4gXHJcbiAgICAvL3RoZSBgZGF0YS5yZXN1bHRzYCBhcnJheSwgYW5kIHJlbmRlciBpdCBpbnRvIHRoZVxyXG4gICAgLy90aGUgUkVTVUxUU19ESVYgZWxlbWVudFxyXG4gICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICBSRVNVTFRTX0RJVi50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEucmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0YyA9IG5ldyBUcmFja0NhcmQoZGF0YS5yZXN1bHRzW2ldKTtcclxuICAgICAgICBSRVNVTFRTX0RJVi5hcHBlbmRDaGlsZCh0Yy5yZW5kZXIoKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vVE9ETzogbGlzdGVuIGZvciB0aGUgXCJzdWJtaXRcIiBldmVudCByYWlzZWRcclxuLy9ieSB0aGUgU0VBUkNIX0ZPUk0gZWxlbWVudCwgYW5kIHF1ZXJ5IHRoZSBpVHVuZXNcclxuLy9BUEkuIFVzZSBhIGxhbWJkYSBmdW5jdGlvbiBmb3IgdGhlIGV2ZW50IGxpc3RlbmVyIVxyXG5TRUFSQ0hfRk9STS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGV2dCA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGxldCBxID0gU0VBUkNIX0lOUFVULnZhbHVlO1xyXG4gICAgUkVTVUxUU19ESVYudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgUkVTVUxUU19ESVYuYXBwZW5kQ2hpbGQobmV3IFByb2dyZXNzQmFyKCkucmVuZGVyKCkpO1xyXG4gICAgZmV0Y2goU0VBUkNIX0FQSSArIHEpXHJcbiAgICAgICAgLnRoZW4oaGFuZGxlUmVzcG9uc2UpXHJcbiAgICAgICAgLnRoZW4ocmVuZGVyUmVzdWx0cylcclxuICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3IpO1xyXG59KVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdXG5cbiAgICB2YXIgaXNEYXRhVmlldyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG4gICAgfVxuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID0gQXJyYXlCdWZmZXIuaXNWaWV3IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbiAgZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3JcbiAgfVxuXG4gIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMubWFwID0ge31cblxuICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgICAgfSwgdGhpcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKVxuICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlKycsJyt2YWx1ZSA6IHZhbHVlXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgIGJvZHkudHJpbSgpLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZm9ybVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICByYXdIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9ICdzdGF0dXMnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1cyA6IDIwMFxuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICAgIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVyc1xuICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0XG4gIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZVxuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfVxuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy9UT0RPOiBpbXBsZW1lbnQgYW5kIGV4cG9ydCBhIGNsYXNzIG5hbWVkIFRyYWNrQ2FyZFxyXG4vL3RoYXQgdGFrZXMgYW4gaVR1bmVzIEFQSSByZXN1bHQgdHJhY2sgaW4gdGhlIFxyXG4vL2NvbnN0cnVjdG9yLCBhbmQgcmVuZGVycyB0aGF0IHRyYWNrIGRhdGEgYXMgYW5cclxuLy9lbGVtZW50IHRyZWUgbGlrZSB0aGlzXHJcbi8vPGZpZ3VyZT5cclxuLy8gIDxpbWcvPlxyXG4vLyAgPGZpZ2NhcHRpb24+PC9maWdjYXB0aW9uPlxyXG4vLzwvZmlndXJlPlxyXG5cclxubGV0IHByZXZpZXdBdWRpbyA9IG5ldyBBdWRpbygpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhY2tDYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKHRyYWNrRGF0YSkge1xyXG4gICAgICAgIHRoaXMudHJhY2tEYXRhID0gdHJhY2tEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgZmlnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZ3VyZVwiKTtcclxuICAgICAgICBsZXQgaW1nICA9IGZpZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpKTtcclxuICAgICAgICBpbWcuc3JjID0gdGhpcy50cmFja0RhdGEuYXJ0d29ya1VybDEwMDtcclxuICAgICAgICBpbWcuYWx0ID0gdGhpcy50cmFja0RhdGEudHJhY2tOYW1lO1xyXG5cclxuICAgICAgICBsZXQgZmlnY2FwID0gZmlnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWdjYXB0aW9uXCIpKTtcclxuICAgICAgICBmaWdjYXAudGV4dENvbnRlbnQgPSB0aGlzLnRyYWNrRGF0YS50cmFja05hbWU7XHJcbiAgICAgICAgZmlnLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHByZXZpZXdBdWRpby5zcmMgPSB0aGlzLnRyYWNrRGF0YS5wcmV2aWV3VXJsO1xyXG4gICAgICAgICAgICBwcmV2aWV3QXVkaW8ucGxheSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIGZpZztcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9UcmFja0NhcmQuanMiLCIvL1RPRE86IGltcGxlbWVudCBhbmQgZXhwb3J0IGEgY2xhc3NcclxuLy9uYW1lZCBQcm9ncmVzc0JhciB0aGF0IHJlbmRlcnMgYSBCb290c3RyYXBcclxuLy9wcm9ncmVzcyBiYXIgd2l0aCBhIHdpZHRoIG1hdGNoaW5nIHRoZSB2YWx1ZVxyXG4vL3Bhc3NlZCB0byB0aGUgY2xhc3MgY29uc3RydWN0b3JcclxuLy9odHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy80LjAvY29tcG9uZW50cy9wcm9ncmVzcy9cclxuLy88ZGl2IGNsYXNzPVwicHJvZ3Jlc3NcIj5cclxuLy8gIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLXN0cmlwZWQgcHJvZ3Jlc3MtYmFyLWFuaW1hdGVkXCI+PC9kaXY+XHJcbi8vPC9kaXY+XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc0JhciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAxMDA7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IGRpdlByb2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdlByb2cuY2xhc3NMaXN0LmFkZChcInByb2dyZXNzXCIpO1xyXG5cclxuICAgICAgICBsZXQgZGl2QmFyID0gZGl2UHJvZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcclxuICAgICAgICBkaXZCYXIuY2xhc3NMaXN0LmFkZChcInByb2dyZXNzLWJhclwiLCBcInByb2dyZXNzLWJhci1zdHJpcGVkXCIsIFwicHJvZ3Jlc3MtYmFyLWFuaW1hdGVkXCIpO1xyXG4gICAgICAgIGRpdkJhci5zdHlsZS53aWR0aCA9IHRoaXMudmFsdWUgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRpdlByb2c7XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvUHJvZ3Jlc3NCYXIuanMiXSwic291cmNlUm9vdCI6IiJ9